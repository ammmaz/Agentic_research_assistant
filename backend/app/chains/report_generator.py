from langchain.prompts import PromptTemplate
from langchain.chat_models import ChatOpenAI

class ReportGenerator:
    def __init__(self):
        self.llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0.7)
        
        self.report_template = """
# Research Report: {topic}

## Executive Summary
{executive_summary}

## Research Methodology
{methodology}

## Key Findings
{key_findings}

## Detailed Analysis
{detailed_analysis}

## Conclusions
{conclusions}

## Recommendations
{recommendations}

## References and Sources
{sources}

---
*Report generated by Agentic Research Assistant*
"""
    
    def generate_report(self, topic: str, research_data: dict, research_questions: list) -> str:
        """Generate a comprehensive research report."""
        
        # Generate sections using the LLM
        executive_prompt = f"Write an executive summary for research on: {topic}\n\nResearch findings: {research_data.get('research_output', '')}"
        executive_summary = self.llm.predict(executive_prompt)
        
        methodology = "Research conducted using AI agent tools including web search, academic paper search, and data analysis."
        
        findings_prompt = f"Extract key findings from this research: {research_data.get('research_output', '')}"
        key_findings = self.llm.predict(findings_prompt)
        
        analysis_prompt = f"Provide detailed analysis for: {topic}\n\nFindings: {research_data.get('research_output', '')}"
        detailed_analysis = self.llm.predict(analysis_prompt)
        
        conclusions_prompt = f"Draw conclusions from this research: {research_data.get('research_output', '')}"
        conclusions = self.llm.predict(conclusions_prompt)
        
        recommendations_prompt = f"Provide recommendations based on this research: {research_data.get('research_output', '')}"
        recommendations = self.llm.predict(recommendations_prompt)
        
        # Assemble final report
        final_report = self.report_template.format(
            topic=topic,
            executive_summary=executive_summary,
            methodology=methodology,
            key_findings=key_findings,
            detailed_analysis=detailed_analysis,
            conclusions=conclusions,
            recommendations=recommendations,
            sources="\n".join(research_data.get("sources_used", ["No sources extracted"]))
        )
        
        return final_report